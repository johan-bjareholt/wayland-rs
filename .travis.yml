language: rust

# only cache cargo subcommand binaries and wayland libs .so
# the build artifacts take a lot of space and are slower to
# cache than to actually rebuild anyway...
# We need to cache the whole .cargo directory to keep the
# .crates.toml file.
cache:
  directories:
    - /home/travis/install
    - /home/travis/.cargo

# But don't cache the cargo registry
before_cache:
  - rm -rf /home/travis/.cargo/registry

dist: trusty

sudo: false

rust:
  - 1.33.0
  - stable
  - beta

env:
  - FEATURES=""
  - FEATURES="client_native"
  - FEATURES="server_native"
  - FEATURES="client_native server_native"
  - FEATURES="aux"

matrix:
  include:
    - rust: stable
      env: BUILD_FMT=1
    - rust: stable
      env: COVERAGE=1
      sudo: true
      addons:
        apt:
          packages:
            - libssl-dev
    - rust: stable
      env: BUILD_DOC=1
    - rust: stable
      env: CLIPPY=1
# The freebsd image no longer works: https://github.com/rust-embedded/cross/issues/306
#    - rust: stable
#      env: TARGET=x86_64-unknown-freebsd
#      sudo: true
#      services: docker

branches:
  only:
    - master

before_script:
  - export PATH=$HOME/.cargo/bin:$PATH
  - mkdir $(pwd)/socket
  - export XDG_RUNTIME_DIR="$(pwd)/socket"
  - cargo fetch
  - |
      rustup component add rustfmt-preview
      if [ -n "$CLIPPY" ]; then
        rustup component add clippy
      elif [ -n "$BUILD_DOC" ]; then
        echo "Building doc, nothing to install..."
      elif [ -n "$COVERAGE" ]; then
        which cargo-install-update || cargo install cargo-update
        cargo install-update cargo-update
        cargo install-update -i cargo-tarpaulin
      elif [ -n "$TARGET" ]; then
        which cargo-install-update || cargo install cargo-update
        cargo install-update cargo-update
        cargo install-update -i cross
      else
        # Building & running tests, we need to install the wayland lib
        ./travis_install_wayland.sh "1.15.0"
        export LD_LIBRARY_PATH="$HOME/install/lib:$LD_LIBRARY_PATH"
      fi

os:
  - linux

script:
  - |
      if [ -n "$BUILD_FMT" ]; then
        cargo fmt --all -- --check
        rustfmt --check tests/scanner_assets/*.rs
      elif [ -n "$COVERAGE" ]; then
        cargo tarpaulin --out Xml --all --features "" --exclude wayland-egl --exclude wayland-cursor
        bash <(curl -s https://codecov.io/bash) -cF full_rust
        cargo tarpaulin --out Xml --all --features "client_native" --exclude wayland-egl --exclude wayland-cursor
        bash <(curl -s https://codecov.io/bash) -cF client_system
        cargo tarpaulin --out Xml --all --features "server_native" --exclude wayland-egl --exclude wayland-cursor
        bash <(curl -s https://codecov.io/bash) -cF server_system
        cargo tarpaulin --out Xml --all --features "client_native server_native" --exclude wayland-egl --exclude wayland-cursor
        bash <(curl -s https://codecov.io/bash) -cF both_system
      elif [ -n "$CLIPPY" ]; then
        cargo clippy --all --exclude wayland-egl --exclude wayland-cursor -- -D warnings
        cargo clippy --all --all-features -- -D warnings
      elif [ -n "$BUILD_DOC" ]; then
        cargo doc --all --no-deps --all-features
      elif [ -n "$TARGET" ]; then
        cross build --all --target "$TARGET"
        cross build --all --target "$TARGET" --features "client_native server_native"
      elif [ "$FEATURES" == "aux" ]; then
        cargo test -p wayland-egl --features "client_native"
        cargo test -p wayland-cursor --features "client_native"
      else
        cargo test --all --features "$FEATURES" --exclude wayland-egl --exclude wayland-cursor
      fi

after_success:
  - |
      if [ -n "$BUILD_DOC" ]; then
        cp ./doc_index.html ./target/doc/index.html
        cp ./rust.css ./target/doc/rust.css
      fi

deploy:
  provider: pages
  skip_cleanup: true
  github_token: $GITHUB_TOKEN
  local_dir: "target/doc"
  on:
    branch: master
    rust: stable
    condition: $BUILD_DOC = 1

notifications:
    webhooks:
        urls:
            - "https://scalar.vector.im/api/neb/services/hooks/dHJhdmlzLWNpLyU0MGxldmFucyUzQXNhZmFyYWRlZy5uZXQvJTIxRkt4aGprSUNwakJWelZlQ2RGJTNBc2FmYXJhZGVnLm5ldA"
        on_success: change
        on_failure: always
        on_start: never
